import { BOC, Slice } from 'ton3-core';
import { loadShardHashes } from './loadShardHashes';
import { WorkchainShards } from './WorkchainShards';

/**
 * BoC with ShardHashes.
 * Block: -1, 8000000000000000, 9515750 (contains 16 shards)
 * Source: https://explorer.toncoin.org/search?workchain=-1&shard=8000000000000000&seqno=9515750
 */
const SHARD_HASHES = BOC.fromStandard(
  'b5ee9c7201022401000788000101c0010103d040020201c003040201c005060201c013140201c007080201c00d0e0201c0090a0201c00b0c01db50066e1740048997300000701f4fbbba000000701f4fbbba0977a44690fd239a73000b00ee280b42cb8e8606d677d855bf4fad4d86f546864565e1f203a1358358d4504e534077b61400881376f1c9f325910109f0809868e08000125450400000000000000004899723011412722301db50066dc7c0048997300000701f4fbbba000000701f4fbbba0bc4773eef023317c07542dcabfde484fbd26ce6da62385bf05419cd89767d05171674ad9efe2d509fd310e05a9303e4fb858ee1749d301df645bb98af6e76f4e08000125490c00000000000000004899723011412722301db50066ba7d0048997300000701f4fbbba000000701f4fbbba0862dae612cdfa94384abf0c5b7aa3fb09c2bc1260382050893b8245b57e196c1910ec09564ac3831b5a79af82a1d3383c711bcf2e47d9b5862536ebc7bc6aa740800012546940000000000000000489971b011412721b01db50066d27c8048997300000701f4fbbba000000701f4fbbba0f126864e9a84f481b7eb4efd1842966db56cd788c7a641bc60dff3021f2ad713c8f2857aedff2f0b6c4f1bab84ee9ac4d1730f8b66dc27d1808445e589985b6608000125421c000000000000000048997230114127a230201c00f100201c0111201db50066e76b0048997300000701f5035cc000000701f5035cc09320af9b5c22a9f00aa325ed76428413e131baeea8d2869c7d116920aa4edab791dd7e8c5f9ba40529367a4c7f5a9d439a25d92419f4c9223110fcbce81b32b888000125602400000000000000004899723011412822301db50066c9ec8048997300000701f4fbbba000000701f4fbbba0c5b01bc718fea86020d474eafa54f638f7c7b04b7f42ef2c695474046b8d06e1c60d20c99def5f205afbb2669ae67454a96420e70ddf8148d3d1de124121b1770800012556ac0000000000000000489971b0114127a1b01db50066c7ce0048997300000701f4fbbba000000701f4fbbba0956b29c0968fc66848da21d60126e3b28bb08fcd84208872cdaf18c754193c62158db8a256a247d68b1292fc9a133ff27734353a25cb350e4a49a6c2edf84e758800012557340000000000000000489971b011412821b01db50066c53d0048997300000701f4fbbba000000701f4fbbba0d85be8574b01ff9726d9e524f6ea6f47cd878887f9c0870cbad77e0ad2f81ff33aa45f3a79fc76d224be23d7e32d53a790505e68578ec6981ac774f6270cdd2f08000125513c0000000000000000489971b011412821b0201c015160201c01c1d0201c017180201c0191a01db50066caf88048997300000701f4fbbba000000701f4fbbba09bbc55626dbb9b9bd87a6cc9880e8e9cc8999b8d2b2142fa9a92f44651cad761f34be7e10c1bac48606fb4d8c8a45f14dc453e6807919feb0086aec93f0e2fe08800012543c40000000000000000489971b011412821b01db50066d7708048997300000701f4fbbba000000701f4fbbba0aaf5a45f8ec20d25c9ca0e9fb7e17c69b087b1dda8bdbbb489884a89a56b09f4ef786d13d3dbf70759ffba84b1311b08ad893b01a51d15b32bc54615770bfad4880001253ecc00000000000000004899723011412822301db50066cc3d0048997300000701f4fbbba000000701f4fbbba0a951da1fe2830e69f6385f1e2425b2c1d77d58d5188dd582077020f8f08272f9904ed9e47c22b1775d91eb5044fa171a462a3599c0d87415170e00514c6b800a880001253bd40000000000000000489971b011412721b01db50066bb8c0048997300000701f4fbbba000000701f4fbbba0f68679fa69246333ef99ddacf47949c4926cf8fb62ea5b156d0518a0eff4acbf7afdb85f7a6dc796c2d3e51025c8844b5bc1ee64b5bc9e7dbdeda6ca685b3d9c080001253b5c0000000000000000489971b0114127a2000134090ed101203b9aca0200201c01e1f0201c0212201db50066dbf48048997300000701f4fbbba000000701f4fbbba0f3ef40ccbc5fb2595b9f7d95990fb0bf080330224438e273992ee60c942583a862160aee6f1a37a0b0c11f484706d45600572eed66a07cefa59d0e6a5a7bde84880001253ee400000000000000004899723011412722301db50066bc398048997300000701f4fbbba000000701f4fbbba0dfea86798ec6b50b23bb08c566d81ad392f3f0882e77caa4721089c6fa5c4f59e5d20a79815df7bc6ae7476a1e8ed5718c3962aba02c2ecfabfc4dd976ddd9ac08000125426c000000000000000048997130114127220001340acb1c72203b9aca02001db50066e55d0048997300000701f5035cc000000701f5035cc081ff57eb7c07d3dd6c05d4a2996297b919b637526eb826a20778efef9d0dda9086950c5441772ad700d093718643f3b911244c858b8fb698b3ccd3855cf5c838880001253d74000000000000000048997230114127a2301db50066c9178048997300000701f4fbbba000000701f4fbbba0b244caee4af01528e861712a6e5823e5557f381dd5aee3d8e4b5a979d6d38c026881942016c176200dccc8ada0c8698761ffa61aa0c6a366f81240f594e59d1b88000125487c0000000000000000489971b01141272230013407735940203b9aca020',
);

describe('loadShardHashes', () => {
  let workchainShards: WorkchainShards[];

  beforeAll(() => {
    workchainShards = loadShardHashes(Slice.parse(SHARD_HASHES));
  });

  test('should contain 16 shards', () => {
    expect(workchainShards).toHaveLength(1);
    expect(workchainShards[0].workchain).toBe(0);
    expect(workchainShards[0].shards).toHaveLength(16);
  });

  test.each([
    [0x0800000000000000n, 13484776, 1612874318],
    [0x1800000000000000n, 13482232, 1612874318],
    [0x2800000000000000n, 13464826, 1612874318],
    [0x3800000000000000n, 13477113, 1612874319],
    [0x4800000000000000n, 13487830, 1612874320],
    [0x5800000000000000n, 13472729, 1612874319],
    [0x6800000000000000n, 13471644, 1612874320],
    [0x7800000000000000n, 13470330, 1612874320],
    [0x8800000000000000n, 13473265, 1612874320],
    [0x9800000000000000n, 13479649, 1612874320],
    [0xa800000000000000n, 13473914, 1612874318],
    [0xb800000000000000n, 13465368, 1612874319],
    [0xc800000000000000n, 13481961, 1612874318],
    [0xd800000000000000n, 13465715, 1612874318],
    [0xe800000000000000n, 13486778, 1612874319],
    [0xf800000000000000n, 13472303, 1612874318],
  ])('should contain correct shard IDs (0,%s,%d)', (shardId, seqno, created) => {
    const shard = workchainShards[0].shards.find((shard) => shard.id === shardId);

    expect(shard).toBeDefined();
    expect(shard!.description.seq_no).toBe(seqno);
    expect(shard!.description.gen_utime).toBe(created);
  });
});
